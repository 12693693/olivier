import argparse


class battery():
    def init(self, capacity, position):
        self.capacity = capacity
        self.position = position
        self.output = 0

    def add_house(self, x, y, maxoutput):
        # check of de output niet teveel wordt voor de batterij bij het toevoegen van een huis
        self.output += maxoutput
        if self.output < self.capacity:
          # lijntje trekken


class house():
    def init(self, x, y, maxoutput):
        self.position = x,y
        self.maxoutput = maxoutput

    def compute_distance(self, position_battery):


    def closest_battery(self, batteries):

        for battery in batteries:
          distance = compute_distance(self.position, battery)
          # extra
          if distance < smallest_distance:
            smallest_distance = distance

        # blablabla
if __name__ == "__main__":
    # Set-up parsing command line arguments
    parser = argparse.ArgumentParser(description = "extract top N movies from IMDB")

    # Adding arguments
    parser.add_argument("output", help = "output file (csv)")
    parser.add_argument("-s", "--start_year", type=int, default = 1930, help="starting year (default: 1930)")
    parser.add_argument("-e", "--end_year",   type=int, default = 2020, help="starting year (default: 2020)")
    parser.add_argument("-m", "--amount_movies", type=int, default = 5)

    # Read arguments from command line
    args = parser.parse_args()

    # Run main with provide arguments
    main(args.output, args.start_year, args.end_year, args.amount_movies)
